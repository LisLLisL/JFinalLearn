package com.langmy.jFinal.model;

import cn.dreampie.sqlinxml.SqlKit;
import com.langmy.jFinal.config.AppConstants;
import com.langmy.jFinal.model.base.BasePermission;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Permission extends BasePermission<Permission> {
	public static final Permission dao = new Permission();

	public List<Permission> findByRole(String where, Object... paras) {

		return find(getSelectSql() + SqlKit.sql("permission.findRoleByExceptSelect") + blank + getWhere(where), paras);
	}

	public List<Permission> findByPid(Object pid) {
		return super.find("select * from sec_permission where id = ?", pid);
	}

	public List<Permission> findAll() {
		List<Permission> permissions = this.findByPid(0);
		for (Permission p : permissions) {
			List<Permission> permissionList = this.findByPid(p.get("id"));
			p.put("childPermission", permissionList);
		}
		return permissions;
	}

	public Set<String> findPermissions(String username) {
		List<Permission> permissions = super.findByCache(AppConstants.SHIROCACHE, AppConstants.PERMISSIONCACHEKEY + username,
				"select p.* from sec_user u, sec_role r, sec_permission p, " +
						"sec_user_role ur, sec_role_permission rp where u.id = ur.user_id and r.id = ur.role_id and r.id = rp.role_id and p.id = rp.permission_id and u.username = ?", username);
		Set<String> set = new HashSet<String>();
		for (Permission p : permissions) {
			set.add(p.getStr("name"));
		}
		return set;
	}

}
